use crate::ast::{AstError, UntypedExprKind, UntypedSpExpr, ErrorRecovery, FormalParam, FuncExpr, ArithOp, CompareOp};
use crate::lexer::Token;
use crate::span::Span;
use crate::types::{ID, Type};

grammar<'input, 'err>(errors: &'err mut Vec<ErrorRecovery<'input>>);

extern {
    type Error = Span<AstError>;
    type Location = usize;

    enum Token<'input> {
        Number => Token::Num(<&'input str>),
        ID => Token::ID(<&'input str>),
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Multiply,
        "/" => Token::Divide,
        "=" => Token::Eq,
        "==" => Token::BoolEq,
        "!=" => Token::BoolNotEq,
        "<" => Token::Lt,
        ">" => Token::Gt,
        "<=" => Token::LtEq,
        ">=" => Token::GtEq,
        ";" => Token::Semi,
        "," => Token::Comma,
        "{" => Token::CurlyStart,
        "}" => Token::CurlyEnd,
        "(" => Token::ParenStart,
        ")" => Token::ParenEnd,
        ":" => Token::Colon,
        "if" => Token::If,
        "let" => Token::Let,
        "else" => Token::Else,
        "true" => Token::True,
        "false" => Token::False,
        "int" => Token::Int,
        "bool" => Token::Bool,
        "fn" => Token::Fn,
        "->" => Token::RArrow,
        "pub" => Token::Pub,
    }
}

/// wraps UntypedExprKind in a Span which tracks its location
Sp<Rule>: UntypedSpExpr =
    <l: @L> <rule: Rule> <r: @R> => (l, Box::new(rule.into()), r).into();

// Root of a module
pub Program: UntypedSpExpr = {
    Sp<Module>,
}

pub Module: UntypedExprKind = {
        Sequence<Sp<Function>> => UntypedExprKind::Block(<>),
}

// Root of the REPL
pub ReplExpression: UntypedSpExpr = {
    Sp<ExpressionList>,
}
pub ExpressionList: UntypedExprKind = {
    <mut v:MaybeStatements> => {
        // if the program has just one statement, unwrap it.
        if v.len() == 1 {
            (*v.remove(0).item).into()
        } else {
            UntypedExprKind::Block(v)
        }
    }
}

// Statement grammar

// statements optionally followed by one expression
MaybeStatements: Vec<UntypedSpExpr> = {
  Statements,
  <mut v:Statements> <e:Sp<ExpressionWithoutBlock>> => {v.push(e); v},
  Sp<ExpressionWithoutBlock> => vec![<>],
  () => vec![],
};

#[inline]
Statements: Vec<UntypedSpExpr> = {
    Sequence1<Sp<Statement>>
};

Statement: UntypedExprKind = {
  LetStatement,
  ExpressionStatement,
  //";" => None, // shift-reduce conflict
};

Expression: UntypedExprKind = {
        ExpressionWithBlock,
        ExpressionWithoutBlock,
}
// expressions that act as individual statements with their own delimiters (e.g. curly braces)
ExpressionWithBlock: UntypedExprKind = {
Block,
IfExpr,
}

ExpressionWithoutBlock: UntypedExprKind = {
//CallExpression, // This is located inside Term for precedence reasons
ComparisonExpression,
ArithmeticOrLogicalExpression,
}

#[inline]
ExpressionStatement: UntypedExprKind = {
    <ExpressionWithoutBlock> ";",
    <ExpressionWithBlock> ";"?,
    <!> ";" => { errors.push(<>.clone()); UntypedExprKind::from_error(&<>) },
}

LetStatement: UntypedExprKind = {
    "let" <i:ID> <t:TypeAscription?> <e:MaybeInitExpr> ";" => UntypedExprKind::Let(ID::Name(i.to_string()), t, e),
};

Block: UntypedExprKind = {
  "{" <MaybeStatements> "}" => UntypedExprKind::Block(<>),
  "{" <!> "}" => { errors.push(<>.clone()); UntypedExprKind::from_error(&<>) },
};

CallExpression: UntypedExprKind = {
    <func:Sp<Term>> "(" <params:CommaNoTrail<Sp<Expression>>> ")" =>
       UntypedExprKind::Call(func, params)
}

// Type grammar

TypeAscription: Type = {
    ":" <TySum>
};

MaybeInitExpr: Option<UntypedSpExpr> = {
    ("=" <Sp<Expression>>)?,
};

TySum: Type = {
  ty,
};

ty: Type = {
  TyPrim,
  "(" ")" => Type::Void,
};

TyPrim: Type = {
  "int" => Type::Int64,
  "bool" => Type::Bool,
};

// Expression grammar


/// these are non-associative and binds more loosely than arithmetic expressions
ComparisonExpression: UntypedExprKind = {
 Sp<ArithmeticOrLogicalExpression> CompareOpExp Sp<ArithmeticOrLogicalExpression> => UntypedExprKind::CompareOp(<>),
}

CompareOpExp: CompareOp = {
        "==" => CompareOp::Eq,
        "!=" => CompareOp::Neq,
        "<" => CompareOp::Lt,
        ">" => CompareOp::Gt,
        "<=" => CompareOp::LtEq,
        ">=" => CompareOp::GtEq,
};

/// A single operator expression yields a value and may recurse
ArithmeticOrLogicalExpression: UntypedExprKind = {
    Sp<ArithmeticOrLogicalExpression> ExprOp Sp<Factor> => UntypedExprKind::ArithOp(<>),
    Factor,
};

ExprOp: ArithOp = {
    "+" => ArithOp::Add,
    "-" => ArithOp::Sub,
};

Factor: UntypedExprKind = {
    UnaryTerm,
    Sp<Factor> FactorOp Sp<UnaryTerm> => UntypedExprKind::ArithOp(<>),
};

FactorOp: ArithOp = {
    "*" => ArithOp::Mul,
    "/" => ArithOp::Div,
};

UnaryTerm: UntypedExprKind = {
    "-" <Sp<Term>> => UntypedExprKind::Negate(<>),
    Term,
};

Term: UntypedExprKind = {
    Number => UntypedExprKind::Number(<>.to_string()),
    Identifier,
    CallExpression,
    "true" => UntypedExprKind::Bool(true),
    "false" => UntypedExprKind::Bool(false),
    "(" <Expression> ")",
    "(" <!> ")" => { errors.push(<>.clone()); UntypedExprKind::from_error(&<>) },
};

Identifier:
UntypedExprKind = {
    ID => UntypedExprKind::Identifier(ID::Name(<>.to_string())),
}

IfExpr: UntypedExprKind = {
    "if" <c:Sp<ExpressionWithoutBlock>> <t:Sp<Block>> "else" <f:Sp<Block>> => UntypedExprKind::If(c, t, f),
}

// Functions

Function: UntypedExprKind = {
    <v:Visibility?> "fn" <name:ID> "(" <params:FunctionParameters> ")" <ret:FunctionReturnType> <block:Sp<Block>> => {
    let id = if v == Some("pub") {
        ID::PubFuncId(name.to_string())
    } else {
        ID::Name(name.to_string())
    };
    UntypedExprKind::Function(FuncExpr::new(name.to_string(), id, params, ret, block))
  },
}

Visibility: &'static str = {
    "pub" => "pub",
}

FunctionParameters: Vec<FormalParam> = {
    CommaNoTrail<FunctionParam>,
}

// Does not support patterns yet.
// It would also be nice to make the type optional
// but that will require more complex type inference.
FunctionParam: FormalParam = {
    <id:ID> <ty:TypeAscription> => FormalParam { name: ID::Name(id.to_string()), ty },
}

FunctionReturnType: Type = {
    "->" <ty>,
    () => Type::Void,
}


// Macros for delimited lists

#[inline]
Comma1NoTrail<E>: Vec<E> = {
    Delimited1<E, ",">
};

#[inline]
CommaNoTrail<E>: Vec<E> = {
    Delimited<E, ",">
};


#[inline]
Delimited<E, D>: Vec<E> = {
    Delimited1<E, D>,
    () => vec![],
};


Delimited1<E, D>: Vec<E> = {
    <mut v:Delimited1<E, D>> D <e:E> => {
        v.push(e);
        v
    },
    E => vec![<>],
};

#[inline]
Sequence<E>: Vec<E> = {
    Sequence1<E>,
    () => vec![],
};

Sequence1<E>: Vec<E> = {
    <mut v:Sequence1<E>> <e:E> => {
        v.push(e);
        v
    },
    E => vec![<>],
};