use crate::ast::{Expr, Opcode};

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
    IfExpr,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp UnaryTerm => Box::new(Expr::Op(<>)),
    UnaryTerm,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

UnaryTerm: Box<Expr> = {
    "-" <Term> => Box::new(Expr::Negate(<>)),
    Term,
};

Term: Box<Expr> = {
    Num,
    TRUE,
    FALSE,
    "(" <Expr> ")",
};

Block: Box<Expr> = {
    "{" <ExpressionSequence> "}" =>  Box::new(Expr::Sequence(<>))
}

ExpressionSequence: Vec<Expr> = {
    <mut v:ExpressionSequence> ";" <e:Expr> => {
        v.push(*e);
        v
    },
    Expr => vec![*<>],
};

IfExpr: Box<Expr> = "if" <c:Expr> <t:Block> "else" <f:Block> => Box::new(Expr::If(c, t, f));

// Terminals

Num: Box<Expr> = <r"[0-9]+"> => Box::new(Expr::Number(<>.to_string()));
TRUE: Box<Expr> = "true" => Box::new(Expr::Bool(true));
FALSE: Box<Expr> = "false" => Box::new(Expr::Bool(false));
ID: String = <s:r"[a-z][a-zA-Z0-9_]*"> => s.to_string();
