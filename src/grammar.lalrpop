use crate::ast::{Expr, Opcode};

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp UnaryTerm => Box::new(Expr::Op(<>)),
    UnaryTerm,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

UnaryTerm: Box<Expr> = {
    "-" <Term> => Box::new(Expr::Negate(<>)),
    Term,
};

Term: Box<Expr> = {
    Num => Box::new(<>),
    "(" <Expr> ")"
};

ID: String = <s:r"[a-z][a-zA-Z0-9_]*"> => s.to_string();

Num: Expr = <r"[0-9]+"> => Expr::Number(<>.to_string());
